//함수 객체 : 함수도 객체다

//자바스크립트에서는 함수도 객체다.
/*
    즉, 함수의 기본 기능인 코드 실행뿐만 아니라, 함수 자체가 일반 객체처럼 프로터피들을 가질 수 있다는 것이다.
*/

function add(x,y) {
    return x+y;
}

add.result = add(3,2);
add.status = 'Ok';

console.log(add.result);
console.log(add.status);

/*
    함수 선언문 방식으로 add() 함수를 생성한 후, add() 함수가 일반 객체처럼 result와 status 프로퍼티를 추가하는 게 가능하다는 것을 보여준다.

    add() 함수를 생성할 때 함수 코드는 함수 객체의 [[Code]] === return x + y; 내부 프로퍼티에 저장된다.
    add() 함수에 마치 일반 객체처럼 result 프로퍼티를 동적으로 생성하고, 여기에 add() 함수를 호출한 결과를 저장한 것을 확인할 수 있다.
    따라서 예제 코드 add(2,3) 함수 실행의 결과값인 5가 add() 함수 객체의 result 프로퍼티에 저장된다.

    add() 함수 객체의 status 프로퍼티도 일반 객체에서의 접근 방식처럼 add.status를 이용해 접근이 가능하다.

    함수는 특정 기능의 코드를 수행할뿐만 아니라, 일반 객체처럼 자신의 프로퍼티를 가질 수 있는 특별한 객체라고 볼 수 있다.
*/

// 자바스크립트에서 함수는 값을 취급된다.
/*
    자바스크립트에서 함수는 개체다. 이는 함수도 일반 객체처럼 취급될 수 있다. 따라서 자바스크립트 함수는 다음과 같은 동작이 가능하다.
    1. 리터럴에 의해 생성
    2. 변수나 배열의 요소, 객체의 프로퍼티 등에 할당 가능
    3. 함수의 인자로 전달 가능
    4. 함수의 리턴값으로 리턴 가능
    5. 동적으로 프로퍼티를 생성 및 할당 가능
    이러한 특징이 있으므로 자바스크립트에서는 함수를 "일급객체"라고 부른다.
    일급 객체라는 말은 컴퓨터 프로그래밍 언어 분야ㅔ서 쓰이는 용어로서, 앞에서 나열한 기능이 모두 가능한 객체를 일급 객체라고 부른다.
    자바스크립트 함수가 가지는 이러한 일급 객체의 특성으로 함수형 프로그래밍이 가능하다. 이에 대해서는 뒤에 배운다.

    자바스크립트 함수의 기능은 C, 자바와 같은 다른 언어 함수의 기능과 거의 비슷하다. 입력한 값을 받아 처리한 다음 그 결과는 반환하는 구조다.
    하지만 이러한 기본적인 기능 ㅚ에도 자바스크립트에서 함수를 제대로 이해하려면 함수가 일급 객체이며 이는 곧 함수가 일반 객체처럼 값으로 취급된다는 것을 이해해야한다.
    따라서 함수를 변수나 객체, 배열 등에 값으로도 저장할 수 있으며, 다른 함수의 인자로 전달한다거나 함수의 리턴값으로도 사용 가능하다는 것을 알 수 있다.
*/

//변수나 프로퍼티의 값으로 할당
/*
    함수는 숫자나 문자열처럼 변수나 프로퍼터의 값으로 할당될 수 있다.
*/

var foo = 100;
var bar = function () {return 100; };
console.log(bar());

var obj = {};
obj.baz = function () {return 200;};
console.log(obj.baz());

/*
    foo 변수에 100이라는 값이 할당 된것 처럼
    bar 변수에는 함수 리터럴로 생성한 함수가 저장
    foo와 bar 할당문의 차이는 bar는 함수의 참조값을 저장하고 있으므로,  bar()라고 했을 때 실제 함수의 호출이 가능하다는 것이다.

    obj.baz는 객체의 프로퍼티나 배열의 원소 등에도 할당이 가능하다.
*/


//함수 인자로 전달
/*
    함수는 다른 함수의 인자로도 전달이 가능하다.
*/

var foo = function(a) {
    a();
}

foo(function() {
    console.log('Function can be used as the argument.');
});

/*
    foo()는 함수 표현식 방법으로 생성한 함수로서, 인자로 받은 a 함수를 내부에서 함수 호출 연산자()를 붙여 호출하는 기능을 한다.
    foo() 함수를 호출할 때, 함수 리터럴 방식으로 생성한 익명 함수를 a 인자로 넘겼다.
    따라서 foo() 함수 내부에서 a 매개변수로 인자로 념기준 함수를 호출할 수 있다.
    인자로 넘긴 익명 함수가 foo() 함수 내부에서 제대로 호출된 것을 알 수 있다.
*/

//리턴값으로 활용
/*
    함수는 다른 함수의 리턴값으로 활용할 수 있다.
    다음 예제에서 foo() 함수는 console.log()를 이용해 출력하는 간단한 익명 함수를 리턴하는 역할을 한다.
    이것이 가능한 이유 또한 함수 자체가 값으로 취급되기 때문이다.
*/

var foo = function() {
    return function() {
        console.log('this function is the return value');
    };
};

var bar = foo();
bar();

/*
    foo() 함수가 호출되면서 리턴값으로 전달되는 함수가 bar 변수에 저장된다.
    () 함수 호출 연산자를 이용해 bar()로 리턴된 함수를 실행하는 것이 가능하다.
*/

// 함수 객체의 기본 프로퍼티
/*
    자바스크립트에서는 함수 역시 객체다.(매우매우 중요)
    함수 역시 일반적인 객체의 기능에 추가로 호출됐을 때 정의된 코드를 실행하는 기능을 가지고 있다.
    또한, 일반 객체와는 다르게 추가로 함수 객체만의 표준 프로퍼티가 정의되어 있다.

    실제 함수가 어떤 객체 형태로 되어 있는지를 확인해보고 이를 통해 함수의 표준 프로퍼티들을 살펴볼 것이다.
*/

function add(x, y) {
    return x + y;
}

console.dir(add); // 함수 객체 프로퍼티를 출력하는 코드

/*
    console.dir 결과를 살펴보면 arguments, caller, length 등과 같은 다양한 프로퍼티가 기본적으로 생성된 것을 확인할 수 있다.
    이러한 프로퍼티들이 함수를 생성할 때 포함되는 표준 프로퍼티다.

    ECMA5 스크립트 명세서에서 모든 함수가 length와 prototype 프로퍼티를 가져야 한다고 기술하고 있다.
    add() 함수 역시 length와 prototype 프로퍼티를 가지고 있다.

    우선 length, prototype 이외의 name, caller, arguments, __proto__ 프로퍼티를 간단히 살펴보자.
    이들 프로퍼티는 ECMA 표준이 아니다.
    name 프로퍼티 : 함수의 이름 (예제에서는 함수명이 add지만 익명함수일 경우 빈 문자열)
    caller 프로퍼티 : 자신을 호출한 함수를 나타낸다. (add 함수를 호출하지 않았으므로 null값)
    arguments 프로퍼티 : 함수를 호출할 때 전달된 인자값을 나타내는데 현재는 add()함수가 호출된 상태가 아니므로 null (arguments 객체와 차이 조심!)
    __proto__프로퍼티 : 모든 자바스크립트 객체는 자신의 프로토타입을 가리키는 [[Prototype]]라는 내부 프로퍼티를 가진다.
    이를 통해 자신의 부모 역할을 하는 프로토타입 객체를 기다린다.
    add()와 같이 함수 객체의 부모 역할을 하는 프로토타입 객체를 Function.prototype 객체라고 명명한다.
    이것 역시 함수 객체라고 정의하고 있다.

    참고로 Function.prototype 객체는 모든 함수들의 부모 역할을 하는 프로토타입 객체다.
    때문에 모든 함수는 Function Prototype 객체가 있는 프로퍼티나 메서드를 마치 자신의 것처럼 상속받아 그대로 사용할 수 있다.

    ECMAScript 명세서에서는 이러한 Function.prototype 객체가 가져야 하는 프로퍼티들을 다음과 같이 기술하고 있다.
    1. constructor 프로퍼티
    2. toString() 메서드
    3. apply 메서드
    4. call 메서드
    5. bind 메서드
*/
