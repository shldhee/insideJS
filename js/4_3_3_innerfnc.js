//내부 함수
/*
    자바스크립트에서는 함수 코드 내부에서도 다시 함수 정의가 가능하다.
    이렇게 함수 내부에 정의 된 함수를 내부 함수라고 부른다.
    클로저 생성 및 부모 함수 코드에서 외부에서의 접근을 막고 독립적인 헬퍼 함수를 구현하는 요도로 사용
*/

/*function parent() {
    var a = 100;
    var b = 200;

    function child() {
        var b = 300;

        console.log(a);
        console.log(b);
    }
    child();
}
parent();
child();*/

/*
    1. child() 내부 함수에 변수 a가 없지만 parent() 함수의 변수 a값에 접근하여 출력
    2. 변수 b는 child() 함수에 선언이 되어 있으므로 parent() 함수 호출 시 child() 안에 있는 변수 b = 300울 출력

    이것이 가능한 이유는 바로 자바스크립트의 스코프 체이닝 때문이다. 자세한건 뒤에서~
    내부 함수는 자신을 둘러싼 외부 함수의 변수에 접근 가능하다.

    !!내부 함수는 일반적으로 자신이 정의된 부모 함수 내부에서만 호출이 가능하다.!!
    앞 예제에서 parent() 함수 외부에서 child() 함수 호출을 시도하지만, 함수가 정의되어 있지 않다는 에러를 발생
    이것은 자바스크립트의 함수 스코핑 때문이다. 즉, 함수 내부에 선언된 변수는 함수 외부에서 접근이 불가능하다.
    이 규칙은 내부 함수도 그대로 적용된다. 때문에 부모 함수 외부에서 내부 함수를 호출하는 것이 불가능하다.
    반면에 부모 함수 안에서는 child() 내부 함수 호출 하는것은 가능하다. 내부 함수를 호출하는 부분과 내부 함수가 정의된 부분이 모두 부모 함수 내부에 있기 때문이다.
*/

function parent() {
    var a = 100;

    var child = function() {
        console.log(a);
    }

    return child;
}

var inner = parent();
inner();

/*
    parent() 함수 호출하고, 이 결과로 반환된 inner() 함수를 호출하는 간단한 예제이다.
    1. 앞 예제에서 내부 함수를 함수 표현식으로 정의, child 함수 변수에 저장했다. 그리고 parent()함수의 리턴값으로 내부 함수의 참조값을 가진 child 변수를 리턴했다.
    2. parent() 함수가 호출되면, inner변수에 child 함수 변수 값이 리턴된다. child 함수 변수는 내부 함수의 참조값이 있으므로, 결국 inner변수도 child() 내부 함수를 참조한다.
    3. 때문에 inner 변수에 함수 호출 연산자()를 붙여 함수 호출 구문을 만들면, parent() 함수 스코프 밖에서도 내부 함수 child()가 호출된다.
    호출하는 배ㅜ 함수에는 a 변수가 정의되어 있지 않아, 스코프 체이닝으로 부모 함수에 a 변수가 정의되어 있는지 확인하게 되고, a가 정의되어 그 값이 그대로 출력된다.

    이와 같이 실행이 끝난 parent()와 같은 부모 함수 스코프의 변수를 참조하는 inner()와 같은 함수를 클로저라고 한다.
*/
